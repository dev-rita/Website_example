<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 1. Spring Legacy Project 에서는 서블릿 버전이 2.5이기 때문에 xml 네임 스페이스를 2.5에서 3.1로 수정한다.
 2. 톰캣 7.0부터는 서블릿 3.0 이상을 지원함으로 pom.xml에 이진 파일 업로드 라이브러리를 추가하지 않고, 서블릿 자체적인 파일 업로드 api를 사용해도 된다.
 -->
<web-app version="3.1"  xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
   id="WebApp_ID" >

<!--  <web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
-->

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		
	<!-- 이진파일 업로드 설정 -->	
	<multipart-config>
		<location>C:\\upload\\temp</location><!-- 업로드 되는 경로, 
		첨부파일은 실제 서버가 동작하는 컴퓨터 내에 있는 폴더에 업로드 시켜야 함으로 c 드라이브 밑에 upload 폴더와
		임시 업로드 파일을 저장할 temp폴더를 각각 생성 -->
		<max-file-size>20971520</max-file-size><!-- 1MB*20, 업로드 되는 파일 최대 크기 -->
		<max-request-size>41943040</max-request-size><!-- 40MB, 한번에 올릴 수 있는 최대크기 -->
		<file-size-threshold>20971520</file-size-threshold><!-- 20MB, 메모리 사용크기 -->
	</multipart-config>
	
	</servlet>
	
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- post 방식으로 전달되는 한글을 안깨지게 한다. -->
	<filter>
	<filter-name>encoding</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
	<param-name>encoding</param-name>
	<param-value>UTF-8</param-value>
	</init-param>
	</filter>
	
	<filter-mapping>
	<filter-name>encoding</filter-name>
	<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>
