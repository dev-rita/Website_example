<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security
   http://www.springframework.org/schema/security/spring-security.xsd
   http://www.springframework.org/schema/beans  
   http://www.springframework.org/schema/beans/spring-beans.xsd">

   <bean id="customAccessDenied" class="net.daum.security.CustomAccessDeniedHandler" />
   <!-- CustomAccessDeniedHandler 클래스의 빈아이디 객체명  customAccessDenied 생성-->
   
   <bean id="customLoginSuccess" class="net.daum.security.CustomLoginSuccessHandler" />
   
   <!-- 
   <bean id="customPasswordEncoder" class="net.daum.security.CustomNoOpPasswordEncoder" /> -->
   
   <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   <!-- 스프링 시큐리티에서 제공하는  BCryptPasswordEncoder 클래스를 이용해서 비번을 암호화 처리한다. 스프링 시큐리티 api 안에 포함되어 있다.-->
   
   <bean id="customUserDetailsService" class="net.daum.security.CustomUserDetailsService" />
  
   <security:http> <!-- 스프링 시큐리티가 http에서 알수 있게 하는 시작 지점 설정 -->
    
     <security:intercept-url pattern="/sample/all" access="permitAll"/>
     <!-- 특정한 url에 접근할 때는 인터셉터를 이용해서 접근을 제한하는 설정은 <security:intercept-url />을 이용한다. pattern 속성값으로 매핑주소가 들어간다.
     access 속성값으로 권한범위가 들어간다.  permitAll은 모든 사용자를 허용한다. -->
     
     <security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
     <!-- 로그인한 사용자만 접근 가능하다.즉 회원만 접근할 수 있다. -->
     
     <security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
     <!-- 로그인 한 사용자들 중에서 관리자 권한을 가진 사용자만이 접근할 수 있다. -->
     
      <!--<security:access-denied-handler error-page="/accessError" />
             접근금지 403 에러가 발생 했을 때 accessError 매핑주소가 실행되게 한다. -->
     
     <security:access-denied-handler ref="customAccessDenied"/><!-- 접근금지 403 에러가 났을 때 빈아이디 customAccessDenied 빈아이디를 호출 -->
     
     <!--<security:form-login />  스프링 시큐리티 api에서 제공하는 자체 폼 로그인 설정 -->
     
     <security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
     <!-- 개발자가 만든 사용자 정의 로그인 폼페이지로 이동하게 한다. 매핑주소 customLogin등록.  authentication-success-handler-ref 속성은 로그인 성공시
     customLoginSuccess 빈아이디를 호출-->
     
     <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
     <!-- 자동로그인(remember-me), data-source-ref로 데이터 베이스를 이용, token-validity-seconds속성은 쿠키 유효 시간(초단위) -->
     
     <security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me"/>
     <!-- 로그아웃시 customLogout 매핑주소가 실행.  invalidate-session="true" 는 로그아웃시 세션을 무효화 시킨다. remember-me는 자동로그인 에서 사용한
     쿠키이름을 삭제.-->
     
   </security:http>
   
    

   <security:authentication-manager>
      <security:authentication-provider user-service-ref="customUserDetailsService">
      <!-- 시큐리티 인증 제공자에서  customUserDetailsService 빈아이디를 호출-->       
       
         <security:password-encoder ref="bcryptPasswordEncoder" />  
                  
         
      </security:authentication-provider>   
   </security:authentication-manager>   
</beans>
